// <auto-generated />
using System;
using Festifact.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Festifact.Api.Migrations
{
    [DbContext(typeof(FestifactDbContext))]
    partial class FestifactDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Festifact.Api.Entities.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganiserId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganiserId");

                    b.ToTable("Festivals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "baz",
                            Genre = 0,
                            Name = "bar",
                            OrganiserId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.FestivalPerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.HasIndex("ShowId");

                    b.ToTable("FestivalPerformances", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FestivalId = 1,
                            ShowId = 1
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Films", (string)null);
                });

            modelBuilder.Entity("Festifact.Api.Entities.ImageUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FestivalId")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("ImageUri", (string)null);
                });

            modelBuilder.Entity("Festifact.Api.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<int?>("FestivalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gps")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1000,
                            Name = "My backyard"
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Organiser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organisers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "foo"
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Performers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryOfOrigin = "Iceland",
                            Description = "Coolino",
                            Genre = 0,
                            Name = "Coolio",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FilmId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PerformerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PerformerId");

                    b.ToTable("Shows", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Show by Coolio",
                            EndDateTime = new DateTime(2023, 5, 11, 13, 18, 18, 777, DateTimeKind.Local).AddTicks(2055),
                            FilmId = 0,
                            LocationId = 1,
                            PerformerId = 1,
                            StartDateTime = new DateTime(2023, 5, 11, 11, 18, 18, 777, DateTimeKind.Local).AddTicks(2016)
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FestivalId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Tickets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FestivalId = 1
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Hogeschoollaan 1",
                            DateOfBirth = new DateTime(2003, 5, 11, 11, 18, 18, 777, DateTimeKind.Local).AddTicks(2085),
                            Email = "piet@test.nl",
                            Name = "Piet"
                        });
                });

            modelBuilder.Entity("Festifact.Api.Entities.Festival", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Organiser", "Organiser")
                        .WithMany()
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("Festifact.Api.Entities.FestivalPerformance", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Festival", "Festival")
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Festifact.Api.Entities.Show", "Show")
                        .WithMany()
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Festifact.Api.Entities.ImageUri", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Festival", null)
                        .WithMany("Images")
                        .HasForeignKey("FestivalId");
                });

            modelBuilder.Entity("Festifact.Api.Entities.Location", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Festival", null)
                        .WithMany("Locations")
                        .HasForeignKey("FestivalId");
                });

            modelBuilder.Entity("Festifact.Api.Entities.Show", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Festifact.Api.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Festifact.Api.Entities.Performer", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Location");

                    b.Navigation("Performer");
                });

            modelBuilder.Entity("Festifact.Api.Entities.Ticket", b =>
                {
                    b.HasOne("Festifact.Api.Entities.Festival", "Festival")
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("Festifact.Api.Entities.Festival", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
